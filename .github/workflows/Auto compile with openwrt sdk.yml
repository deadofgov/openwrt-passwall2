# Copyright (c) 2022-2023 SMALLPROGRAM <https://github.com/smallprogram>
# Description: Auto compile for NanoPI R2S
name: "NanoPI R2S Passwall2 Packages Build"
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
env:
  TZ: Asia/Shanghai
  passwall2: ${{ github.repository }}
  packages: xiaorouji/openwrt-passwall-packages
  SDK_URL: https://downloads.openwrt.org/snapshots/targets/rockchip/armv8/openwrt-sdk-rockchip-armv8_gcc-14.3.0_musl.Linux-x86_64.tar.zst

jobs:
  job_check:
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      passwall2_version: ${{ steps.check_version.outputs.latest_version }}
      has_update: ${{ steps.check_version.outputs.has_update }}
      prerelease: ${{ steps.check_version.outputs.prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - name: Check version
        id: check_version
        env:
          url_tags: https://api.github.com/repos/${{ env.passwall2 }}/tags
        run: |
          cd luci-app-passwall2
          latest_version=$(awk -F ':=' '/PKG_VERSION|PKG_RELEASE/ {print $2}' Makefile | sed ':a;N;s/\$(PKG_VERSION)-//;s/\n$//;s/\n/-/;ba')
          has_update=$([ -z "$(wget -qO- -t1 -T2 ${{env.url_tags}} | grep \"${latest_version}\")" ] && echo true || echo false)
          prerelease=$([ "${{ github.ref_name }}" == "main" ] && echo false || echo true)
          echo "latest_version=${latest_version}" >> $GITHUB_OUTPUT
          echo "has_update=${has_update}" >> $GITHUB_OUTPUT
          echo "prerelease=${prerelease}" >> $GITHUB_OUTPUT
          echo "latest_version: ${latest_version}"
          echo "has_update: ${has_update}"
          echo "prerelease: ${prerelease}"

      - name: Prepare release
        if: steps.check_version.outputs.has_update == 'true'
        run: |
          echo "## :mega:Update content for NanoPI R2S packages" >> release.txt
          echo "![](https://img.shields.io/github/downloads/${{ env.passwall2 }}/${{steps.check_version.outputs.latest_version}}/total?style=flat-square)" >> release.txt
          echo "### Passwall2 Info" >> release.txt
          echo "**:minidisc: Passwall2 Version: ${{steps.check_version.outputs.latest_version}}**" >> release.txt
          echo "**:package: Build Type: Packages Only (IPK files)**" >> release.txt
          echo "**:rocket: Platform: NanoPI R2S (rockchip/armv8)**" >> release.txt
          echo "**:gear: SDK: SNAPSHOT kernel-6.12.48~4266bd01be6159c4b72cb3dbb3476bfc-r1**" >> release.txt
          touch release.txt

      - name: Generate new tag & release
        if: steps.check_version.outputs.has_update == 'true'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{steps.check_version.outputs.latest_version}}
          target_commitish: ${{ github.ref_name }}
          prerelease: ${{steps.check_version.outputs.prerelease}}
          body_path: release.txt

  job_build_nanopi_r2s:
    name: Build packages for NanoPI R2S
    needs: job_check
    if: needs.job_check.outputs.has_update == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Install packages
        run: |
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android
          echo "Installing build dependencies for NanoPI R2S packages"
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
            g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
            libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \
            libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \
            ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
            python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
            upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Initialize NanoPI R2S SDK environment
        run: |
          echo "Downloading NanoPI R2S SDK for packages build"
          wget ${{ env.SDK_URL }}
          file_name=$(echo ${{ env.SDK_URL }} | awk -F/ '{print $NF}')
          mkdir sdk
          tar --zstd -x -f $file_name -C ./sdk --strip-components=1
          cd sdk

          echo "Configuring feeds for NanoPI R2S packages build"
          cat > feeds.conf.default << EOF
          src-git passwall_packages https://github.com/${{ env.packages }}.git;main
          src-git passwall2 https://github.com/${{ env.passwall2 }}.git;${{ github.ref_name }}
          src-git base https://github.com/openwrt/openwrt.git;main
          src-git packages https://github.com/openwrt/packages.git;main
          src-git luci https://github.com/openwrt/luci.git;main
          src-git routing https://github.com/openwrt/routing.git;main
          src-git telephony https://github.com/openwrt/telephony.git;main
          EOF
          
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Apply patches for NanoPI R2S
        run: |
          cd sdk
          echo "Applying NanoPI R2S specific patches"

          # Update golang and rust for better compatibility
          rm -rf temp_resp
          git clone -b main --single-branch --depth 1 https://github.com/openwrt/packages.git temp_resp
          
          echo "Updating golang version for ARM64"
          rm -rf feeds/packages/lang/golang
          cp -r temp_resp/lang/golang feeds/packages/lang
          
          echo "Updating rust version for ARM64"
          rm -rf feeds/packages/lang/rust
          cp -r temp_resp/lang/rust feeds/packages/lang
          
          rm -rf temp_resp

          # Fix rust host build error for cross-compilation
          echo "Fixing rust cross-compilation for ARM64"
          sed -i 's/--set=llvm\.download-ci-llvm=false/--set=llvm.download-ci-llvm=true/' feeds/packages/lang/rust/Makefile
          grep -q -- '--ci false \\' feeds/packages/lang/rust/Makefile || sed -i '/x\.py \\/a \        --ci false \\' feeds/packages/lang/rust/Makefile

          echo "NanoPI R2S packages build patches applied successfully"

      - name: SSH connection to Actions
        uses: mxschmitt/action-tmate@v3.13
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh != 'false') || contains(github.event.action, 'ssh')

      - name: Configure packages build for NanoPI R2S
        run: |
          cd sdk
          echo "Configuring packages-only build for NanoPI R2S (aarch64_generic)"
          
          cat > .config << EOF
          CONFIG_ALL_NONSHARED=n
          CONFIG_ALL_KMODS=n
          CONFIG_ALL=n
          CONFIG_AUTOREMOVE=n
          CONFIG_SIGNED_PACKAGES=n
          CONFIG_LUCI_LANG_zh_Hans=y
          CONFIG_PACKAGE_luci-app-passwall2=m
          CONFIG_PACKAGE_luci-app-passwall2_Iptables_Transparent_Proxy=y
          CONFIG_PACKAGE_luci-app-passwall2_Nftables_Transparent_Proxy=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Haproxy=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Hysteria=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_IPv6_Nat=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_NaiveProxy=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Shadowsocks_Libev_Client=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Shadowsocks_Libev_Server=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Shadowsocks_Rust_Client=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Shadowsocks_Rust_Server=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_ShadowsocksR_Libev_Client=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_ShadowsocksR_Libev_Server=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Simple_Obfs=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_SingBox=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_tuic_client=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_V2ray_Plugin=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Xray=y
          EOF

          make defconfig
          echo "Packages-only configuration completed for NanoPI R2S"

      - name: Download dependencies
        run: |
          cd sdk
          echo "Downloading package dependencies for NanoPI R2S"
          make download -j$(nproc)
          find dl -size -1024c -exec ls -l {} \;

      - name: Compile passwall2 packages for NanoPI R2S
        id: compile
        run: |
          cd sdk
          echo "Starting packages compilation for NanoPI R2S (aarch64_generic)"
          
          # Compile dependencies first
          echo "Compiling base dependencies"
          make package/feeds/passwall_packages/chinadns-ng/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/geoview/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/tcping/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/xray-core/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/v2ray-geodata/compile -j$(nproc) V=s
          
          echo "Compiling proxy clients"
          make package/feeds/passwall_packages/hysteria/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/naiveproxy/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/shadowsocks-rust/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/shadowsocksr-libev/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/simple-obfs/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/sing-box/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/tuic-client/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/v2ray-plugin/compile -j$(nproc) V=s
          
          # Compile main passwall2 package
          echo "Compiling luci-app-passwall2"
          make package/luci-app-passwall2/{clean,compile} -j$(nproc) V=s
          
          echo "Packages compilation completed successfully"
          echo "status=success" >> $GITHUB_OUTPUT
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: Organize NanoPI R2S packages
        if: steps.compile.outputs.status == 'success'
        run: |
          cd sdk
          mkdir -p ../nanopi_r2s_packages
          
          # Find and copy all compiled packages
          find bin/packages -name "*.ipk" | while read ipk; do
            cp "$ipk" ../nanopi_r2s_packages/
          done
          
          # Rename packages with NanoPI R2S prefix
          cd ../nanopi_r2s_packages
          for i in $(ls *.ipk 2>/dev/null || true); do 
            mv "$i" "nanopi-r2s_$i"
          done
          
          ls -la
          echo "NanoPI R2S packages organized successfully"

      - name: Upload NanoPI R2S packages to release
        uses: softprops/action-gh-release@v2
        if: steps.compile.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{needs.job_check.outputs.passwall2_version}}
          files: nanopi_r2s_packages/*.ipk

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        if: steps.compile.outputs.status == 'success'
        with:
          name: nanopi-r2s-passwall2-packages
          path: nanopi_r2s_packages/
          retention-days: 7
